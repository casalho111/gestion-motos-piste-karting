// Schéma Prisma optimisé pour MongoDB
// Avec des index composites et adaptés aux requêtes fréquentes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --- ENUMÉRATIONS ---

enum EtatEntite {
  DISPONIBLE
  EN_MAINTENANCE
  HORS_SERVICE
  A_VERIFIER
  INDISPONIBLE
}

enum TypeEntretien {
  ENTRETIEN_REGULIER
  REPARATION
  REVISION_MOTEUR
  VIDANGE
  FREINS
  PNEUS
  TRANSMISSION
  AUTRES
}

enum Criticite {
  FAIBLE
  MOYENNE
  ELEVEE
  CRITIQUE
}

enum TypePiece {
  MOTEUR
  TRANSMISSION
  FREINAGE
  SUSPENSION
  PNEU
  CHASSIS
  FLUIDE
  ELECTRIQUE
  AUTRES
}

enum TypeUtilisation {
  SESSION_NORMALE
  COURSE
  FORMATION
  TEST_TECHNIQUE
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  WEBHOOK
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum NotificationEventType {
  MOTO_STATUS_CHANGE
  MAINTENANCE_DUE
  MAINTENANCE_OVERDUE
  MAINTENANCE_COMPLETED
  STOCK_LOW
  STOCK_OUT
  PLANNING_REMINDER
  CONTROL_FAILED
  NEW_ALERT
  CRITICAL_ALERT
  SYSTEM_STATUS
}

// --- MODÈLES PRINCIPAUX ---

model PartieCycle {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  numSerie          String            @unique
  modele            String
  dateAcquisition   DateTime
  kilometrage       Float             @default(0)
  etat              EtatEntite        @default(DISPONIBLE)
  notesEtat         String?
  couleur           String?
  
  // Relation avec le moteur actuellement monté (optionnel)
  moteurCourantId   String?           @db.ObjectId @unique
  moteurCourant     Moteur?           @relation(fields: [moteurCourantId], references: [id], name: "MoteurMonte")
  
  // Relations
  historiquesMontage HistoriqueMontage[] @relation("CycleHistorique")
  controles         ControleJournalier[]
  maintenances      Maintenance[]      @relation("CycleMaintenance")
  utilisations      Utilisation[]      @relation("CycleUtilisation")
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([modele, etat])
  @@index([etat, kilometrage])
  @@index([numSerie, modele])
  @@index([createdAt])
  @@index([updatedAt])
}

model Moteur {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  numSerie          String            @unique
  type              String
  cylindree         Int               @default(125)
  dateAcquisition   DateTime
  kilometrage       Float             @default(0)
  heuresMoteur      Float?            @default(0)
  etat              EtatEntite        @default(DISPONIBLE)
  notesEtat         String?
  
  // Relations
  cycleActuel       PartieCycle?      @relation("MoteurMonte")
  historiquesMontage HistoriqueMontage[] @relation("MoteurHistorique")
  maintenances      Maintenance[]      @relation("MoteurMaintenance")
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([type, etat])
  @@index([etat, kilometrage])
  @@index([numSerie, type])
  @@index([createdAt])
  @@index([updatedAt])
}

model HistoriqueMontage {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  dateDebut         DateTime
  dateFin           DateTime?
  
  // Kilométrages au moment du montage/démontage
  kilometrageDebutCycle Float
  kilometrageDebutMoteur Float
  kilometrageFinCycle  Float?
  kilometrageFinMoteur Float?
  
  technicien        String
  notes             String?

  // Relations
  cycleId           String            @db.ObjectId
  cycle             PartieCycle       @relation("CycleHistorique", fields: [cycleId], references: [id])
  
  moteurId          String            @db.ObjectId
  moteur            Moteur            @relation("MoteurHistorique", fields: [moteurId], references: [id])
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([cycleId, dateDebut])
  @@index([moteurId, dateDebut])
  @@index([dateDebut, dateFin])
  @@index([technicien])
}

model Maintenance {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  type              TypeEntretien
  dateRealisation   DateTime
  kilometrageEffectue Float
  coutTotal         Float             @default(0)
  technicien        String
  description       String
  notes             String?
  
  // Relations conditionnelles (peut s'appliquer à un cycle, à un moteur, ou aux deux)
  cycleId           String?           @db.ObjectId
  cycle             PartieCycle?      @relation("CycleMaintenance", fields: [cycleId], references: [id])
  
  moteurId          String?           @db.ObjectId
  moteur            Moteur?           @relation("MoteurMaintenance", fields: [moteurId], references: [id])
  
  piecesUtilisees   PieceUtilisee[]
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([cycleId, dateRealisation])
  @@index([moteurId, dateRealisation])
  @@index([dateRealisation, type])
  @@index([technicien, dateRealisation])
  @@index([type, dateRealisation])
}

model Piece {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  reference         String            @unique
  nom               String
  description       String?
  type              TypePiece
  fournisseur       String?
  prixUnitaire      Float
  
  // Gestion du stock
  quantiteStock     Int               @default(0)
  quantiteMinimale  Int               @default(1)
  emplacement       String?
  
  // Relations
  utilisations      PieceUtilisee[]
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([type])
  @@index([quantiteStock, quantiteMinimale])
  @@index([nom])
  @@index([fournisseur])
}

model PieceUtilisee {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  quantite          Int
  prixUnitaire      Float             // Snapshot du prix au moment de l'utilisation
  
  // Relations
  pieceId           String            @db.ObjectId
  piece             Piece             @relation(fields: [pieceId], references: [id])
  
  maintenanceId     String            @db.ObjectId
  maintenance       Maintenance       @relation(fields: [maintenanceId], references: [id])
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([pieceId, maintenanceId])
  @@index([maintenanceId])
}

model ControleJournalier {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  controleur        String
  estConforme       Boolean
  
  // Éléments contrôlés
  freinsAvant       Boolean           @default(true)
  freinsArriere     Boolean           @default(true)
  pneus             Boolean           @default(true)
  suspensions       Boolean           @default(true)
  transmission      Boolean           @default(true)
  niveauxFluides    Boolean           @default(true)
  eclairage         Boolean           @default(true)
  autres            String?
  
  commentaires      String?
  
  // Relations
  cycleId           String            @db.ObjectId
  cycle             PartieCycle       @relation(fields: [cycleId], references: [id])
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([cycleId, date])
  @@index([date, estConforme])
  @@index([controleur, date])
}

model Utilisation {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  responsable       String
  nbTours           Int
  distanceTour      Float             @default(800) // Longueur du circuit en mètres
  distanceTotale    Float             // Calculée: nbTours * distanceTour
  type              TypeUtilisation   @default(SESSION_NORMALE)
  notes             String?
  
  // Relations
  cycleId           String            @db.ObjectId
  cycle             PartieCycle       @relation("CycleUtilisation", fields: [cycleId], references: [id])
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([cycleId, date])
  @@index([date, type])
  @@index([responsable, date])
}

model PlanningMaintenance {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  titre             String
  description       String
  type              TypeEntretien
  dateEstimee       DateTime
  
  // Pour quel type d'entité
  estMoteur         Boolean           // true pour moteur, false pour cycle
  
  entiteId          String            @db.ObjectId // ID du cycle ou du moteur
  kilometragePrevu  Float
  criticite         Criticite         @default(MOYENNE)
  technicienAssigne String?
  estComplete       Boolean           @default(false)
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([entiteId, estMoteur])
  @@index([dateEstimee, estComplete])
  @@index([estComplete, criticite])
  @@index([technicienAssigne, dateEstimee])
}

model Alerte {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  titre             String
  message           String
  type              String            // "MAINTENANCE", "STOCK", "INCIDENT", etc.
  criticite         Criticite
  dateCreation      DateTime          @default(now())
  estTraitee        Boolean           @default(false)
  traitePar         String?
  dateTraitement    DateTime?
  
  // Références optionnelles vers d'autres entités
  cycleId           String?           @db.ObjectId
  moteurId          String?           @db.ObjectId
  pieceId           String?           @db.ObjectId
  
  // Métadonnées
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Index optimisés
  @@index([estTraitee, criticite])
  @@index([dateCreation, estTraitee])
  @@index([type, estTraitee])
  @@index([cycleId])
  @@index([moteurId])
  @@index([pieceId])
}

// --- NOUVEAUX MODÈLES ---

model Journal {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  timestamp         DateTime          @default(now())
  eventType         String            // Type d'événement (correspond à LogEventType)
  severity          String            // LogSeverity (DEBUG, INFO, WARNING, ERROR, CRITICAL)
  userId            String?
  userName          String?
  message           String
  details           Json?             // Détails de l'événement
  entityType        String?           // Type d'entité concernée (moto, moteur, etc.)
  entityId          String?           // ID de l'entité concernée
  metadata          Json?             // Métadonnées supplémentaires
  
  // Métadonnées
  createdAt         DateTime          @default(now())

  // Index optimisés
  @@index([timestamp, severity])
  @@index([eventType, timestamp])
  @@index([entityType, entityId])
  @@index([userId, timestamp])
}

model Notification {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  eventType         NotificationEventType
  title             String
  message           String
  channel           NotificationChannel
  recipientId       String?
  recipientEmail    String?
  recipientPhone    String?
  status            NotificationStatus    @default(PENDING)
  sentAt            DateTime?
  payload           Json?
  metadata          Json?
  
  // Métadonnées
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Index optimisés
  @@index([recipientId, status])
  @@index([eventType, status])
  @@index([channel, status])
  @@index([createdAt, status])
}

model Webhook {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  url               String
  eventTypes        NotificationEventType[]
  isActive          Boolean               @default(true)
  secret            String?
  headers           Json?                 // En-têtes HTTP personnalisés
  lastCalledAt      DateTime?
  failureCount      Int                   @default(0)
  
  // Métadonnées
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Index optimisés
  @@index([isActive])
  @@index([failureCount, isActive])
}

model InAppNotification {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  message           String
  isRead            Boolean               @default(false)
  eventType         NotificationEventType
  payload           Json?
  
  // Métadonnées
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  // Index optimisés
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([eventType, isRead])
}